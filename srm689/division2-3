
Problem Statement
    
Our garden contains a single row of flowers. You are given the current contents of the row in the String garden. Each character in garden represents one flower. Different characters represent different colors. Flowers of the same color all look the same.   You may rearrange the flowers in your garden into any order you like. (Formally, you may swap any two flowers in your garden, and you can do so arbitrarily many times.)   You are also given a String forbid of the same length as garden. You want to rearrange garden into a new string G that will satisfy the following conditions:
No two adjacent flowers will have the same color. Formally, for each valid i, G[i] and G[i+1] must differ.
For each valid i, G[i] must not be equal to forbid[i].
Let X be the number of different strings G that satisfy all conditions given above. Compute and return the number (X modulo 1,000,000,007).
Definition
    
Class:
ColorfulGardenHard
Method:
count
Parameters:
String, String
Returns:
int
Method signature:
int count(String garden, String forbid)
(be sure your method is public)
Limits
    
Time limit (s):
2.000
Memory limit (MB):
256
Stack limit (MB):
256
Constraints
-
garden will contain between 1 and 15 elements, inclusive.
-
Each element in garden will be a lowercase English letter: 'a'-'z'.
-
garden and forbid will contain the same number of elements.
-
Each element in forbid will be a lowercase English letter: 'a'-'z'.
Examples
0)

    
"aaabbb"
"cccccc"
Returns: 2
There are two solutions: "ababab" and "bababa".
1)

    
"aabbcc"
"aabbcc"
Returns: 5
We have 5 solutions: "bcacba" "cbacba", "cbacab", "bcacab", "cbcaba".
2)

    
"aaaabb"
"xxxxxx"
Returns: 0

3)

    
"abcdefghijklmno"
"zzzzzzzzzzzzzzz"
Returns: 674358851
The answer is (15!) % (10^9+7).
4)

    
"a"
"b"
Returns: 1

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.


Solution:

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.HashMap;
public class ColorfulGardenHard {
	
	public int MOD = 1_000_000_007;
	
	public char[] G;
	public int[] F;
	
	//how many chars per character, index = char-'a'. Eg: a == 0
	public int[] count = new int[26];
	//dp storage
	HashMap<String, Integer> dp = new HashMap<String, Integer>();
	
	public int count(String garden, String forbid){
		G = garden.toCharArray();
		F = new int[forbid.length()];
		//count the color
		for(int i=0; i<G.length; i++){
			count[G[i] - 'a']++;
			F[i] = forbid.charAt(i) - 'a';
		}
	
		int res = dfs(0, -1);
		
		return res;
	}
	
	public int dfs( int pointer, int prev) {
		
		if(pointer == G.length){
			return 1;
		}
		
		//lets build String for dp storage
		StringBuilder k = new StringBuilder();
		k.append(pointer);
    	k.append('|');
    	k.append(prev);
    	for(int i = 0; i < 26; i++) {
      		k.append('|');
      		k.append(count[i]);
    	}
    	String key = k.toString();
    	if(dp.containsKey(key)){
    		return dp.get(key);
    	}
    	
    	//calculate
    	int res = 0;
    	
    	for(int i=0; i<count.length; i++){
    		if(count[i] == 0 || F[pointer] == i || prev == i ) continue;
    		count[i] -= 1;
    		res = (res + dfs(pointer+1, i) % MOD) % MOD;
    		count[i] += 1;
    	}
    	
    	dp.put(key, res);
    	return res;
	}

}
